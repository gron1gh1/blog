{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./src/components/PostList.tsx"],"names":["TagsView","edges","PostList","Tags","React","memo","props","data","allMarkdownRemark","title","pageContext","tag","description","pageQuery","Card","styled","div","PostView","to","src","date","tags","onClick","style","textDecoration","className","map","join","dispatch","useDispatch","node","listStyleType","marginBottom","key","id","kebabCase","frontmatter","thumb","childImageSharp","fluid","excerpt","BlogActions","toggleAnimation"],"mappings":"2FAAA,8GAcMA,EAAW,SAAC,GAA+C,IAA7CC,EAA6C,EAA7CA,MAClB,OAAO,4BAAKC,YAASD,KAEjBE,EAAoCC,IAAMC,MAAK,SAAAC,GAAS,IAE1DL,EAC6BK,EAAMC,KAAeC,kBADlDP,MAGF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKQ,MAAOH,EAAMI,YAAYC,IAAKC,YAAaN,EAAMI,YAAYC,MAClE,kBAACX,EAAD,CAAUC,MAAOA,QAKRE,YAER,IAAMU,EAAY,a,y9CCxBzB,IAAMC,EAAOC,IAAOC,IAAV,KAiFH,SAASC,EAAT,GAQO,IAPZC,EAOY,EAPZA,GACAC,EAMY,EANZA,IACAV,EAKY,EALZA,MACAW,EAIY,EAJZA,KACAC,EAGY,EAHZA,KACAT,EAEY,EAFZA,YACAU,EACY,EADZA,QAEA,OACE,kBAAC,OAAD,CAAMJ,GAAIA,EAAIK,MAAO,CAAEC,eAAgB,QAAUF,QAASA,GACxD,kBAACR,EAAD,KACE,yBAAKK,IAAKA,IACV,yBAAKM,UAAU,WACf,yBAAKA,UAAU,QACb,4BAAKhB,GACL,2BAAIY,EAAKK,KAAI,SAAAf,GAAG,UAAQA,KAAOgB,KAAK,MACpC,2BAAIP,GACJ,2BAAIR,MAMC,SAASV,EAASD,GAC/B,IAAM2B,EAAWC,cACjB,OAAO5B,EAAMyB,KAAI,gBAAGI,EAAH,EAAGA,KAAH,OACf,wBAAIP,MAAO,CAAEQ,cAAe,OAAQC,aAAc,QAAUC,IAAKH,EAAKI,IACpE,kBAACjB,EAAD,CACEC,GAAE,IAAMiB,YAAUL,EAAKM,YAAY3B,OACnCU,IAAKW,EAAKM,YAAYC,MAAMC,gBAAgBC,MAAMpB,IAClDV,MAAOqB,EAAKM,YAAY3B,MACxBW,KAAMU,EAAKM,YAAYhB,KACvBC,KAAMS,EAAKM,YAAYf,KACvBT,YAAakB,EAAKU,QAClBlB,QAAS,WACPM,EAASa,IAAYC,iBAAgB","file":"component---src-templates-tags-tsx-e9e5faac583df4ef9097.js","sourcesContent":["import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport { ITemplateProps } from \"../interface\"\r\nimport SEO from \"../components/seo\"\r\nimport { graphql } from \"gatsby\"\r\nimport {\r\n  Query,\r\n  MarkdownRemarkConnection,\r\n  MarkdownRemarkEdge,\r\n} from \"../gen/graphql-types\"\r\nimport PostList from \"../components/PostList\"\r\ntype ITagTemplateProps = ITemplateProps<{\r\n  tag: string\r\n}>\r\nconst TagsView = ({ edges }: { edges: MarkdownRemarkEdge[] }) => {\r\n  return <ul>{PostList(edges)}</ul>\r\n}\r\nconst Tags: React.FC<ITagTemplateProps> = React.memo(props => {\r\n  const {\r\n    edges,\r\n  }: MarkdownRemarkConnection = (props.data as Query).allMarkdownRemark\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={props.pageContext.tag} description={props.pageContext.tag} />\r\n      <TagsView edges={edges} />\r\n    </Layout>\r\n  )\r\n})\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt(truncate: true, pruneLength: 200)\r\n          frontmatter {\r\n            tags\r\n            title\r\n            date(formatString: \"YYYY-MM-DD HH:mm:ss\")\r\n            thumb {\r\n              childImageSharp {\r\n                fluid(maxWidth: 700, maxHeight: 300) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport styled from \"styled-components\"\r\nimport { kebabCase } from \"../lib/utils\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { BlogActions } from \"../state/reducer\"\r\nimport { MarkdownRemarkEdge } from \"../gen/graphql-types\"\r\n\r\nconst Card = styled.div`\r\n  width: 100%;\r\n  height: 230px;\r\n  border-radius: 5px;\r\n  background: white;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  transition: 0.4s ease-out;\r\n  &:hover {\r\n    transform: translateY(20px);\r\n    &:before {\r\n      opacity: 1;\r\n    }\r\n    .bg-bar {\r\n      border-radius: 5px;\r\n      height: 100%;\r\n    }\r\n    .info {\r\n      transition: 0.4s ease-out;\r\n      p:nth-last-child(1) {\r\n        visibility : visible;\r\n      }\r\n      transform: translateY(-1rem);\r\n    }\r\n  }\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    border-radius: 5px;\r\n    transition: 1s;\r\n  }\r\n\r\n  .bg-bar {\r\n    position: absolute;\r\n    border-radius: 0 0 5px 5px;\r\n    width: 100%;\r\n    height: 120px;\r\n    background: rgba(0, 0, 0, 0.3);\r\n    transition: 0.5s;\r\n  }\r\n\r\n  .info {\r\n    position: relative;\r\n    z-index: 3;\r\n    color: white;\r\n    padding-left: 1.5rem;\r\n    padding-right: 1.5rem;\r\n    transform: translateY(4.5rem);\r\n    transition: 0.5s;\r\n    h1 {\r\n      margin: 0px;\r\n    }\r\n\r\n    p {\r\n      letter-spacing: 1px;\r\n      font-size: 15px;\r\n    }\r\n\r\n    p:nth-last-child(1) {\r\n      padding-top: 10px;\r\n      height:5rem;\r\n      visibility : hidden;\r\n    }\r\n  }\r\n`\r\n\r\ninterface IPostView {\r\n  to: string\r\n  src: string\r\n  title: string\r\n  date: string\r\n  tags: string[]\r\n  description: string\r\n  onClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void\r\n}\r\nexport function PostView({\r\n  to,\r\n  src,\r\n  title,\r\n  date,\r\n  tags,\r\n  description,\r\n  onClick,\r\n}: IPostView) {\r\n  return (\r\n    <Link to={to} style={{ textDecoration: \"none\" }} onClick={onClick}>\r\n      <Card>\r\n        <img src={src} />\r\n        <div className=\"bg-bar\" />\r\n        <div className=\"info\">\r\n          <h1>{title}</h1>\r\n          <p>{tags.map(tag => `#${tag}`).join(\" \")}</p>\r\n          <p>{date}</p>\r\n          <p>{description}</p>\r\n        </div>\r\n      </Card>\r\n    </Link>\r\n  )\r\n}\r\nexport default function PostList(edges: MarkdownRemarkEdge[]) {\r\n  const dispatch = useDispatch()\r\n  return edges.map(({ node }: any) => (\r\n    <li style={{ listStyleType: \"none\", marginBottom: \"30px\" }} key={node.id}>\r\n      <PostView\r\n        to={`/${kebabCase(node.frontmatter.title)}`}\r\n        src={node.frontmatter.thumb.childImageSharp.fluid.src}\r\n        title={node.frontmatter.title}\r\n        date={node.frontmatter.date}\r\n        tags={node.frontmatter.tags}\r\n        description={node.excerpt}\r\n        onClick={() => {\r\n          dispatch(BlogActions.toggleAnimation(true))\r\n        }}\r\n      />\r\n    </li>\r\n  ))\r\n}\r\n"],"sourceRoot":""}